@using System.Text.Json
@using LocationMaster_FE.Models
@using LocationMaster_FE.Models.Responses
@using LocationMaster_FE.Services
@inject UserService UserService
@inject HttpClient http
@using LocationMaster_FE.Services.IServices
@inject IImageService imageService

<div class="owner-content">
    <div class="image-owner">
        <img src="@imgSrc" id="photo-user"/>
    </div>
    <div class="owner-text">
        <div class="owner-text-top">
            <div class="owner-text-left">
                <h1>@_name</h1>
                @* <h4>@_user.FirstName @_user.LastName</h4> *@
            </div>
            <div class="owner-text-right">
                <button class="button-ask">Ask a question</button>
            </div>

        </div>
        <div class="owner-text-bottom">
            <p id="opinion">
                @_description

                @* @Data.Description *@
            </p>
        </div>
    </div>
</div>

@code {

    [Parameter]
    public PlaceInfoResource Data { get; set; }

    private string _name = "";
    private string _description = "";
    private string imgSrc = "";
    private UserResponse _user = new UserResponse();

    //    protected override async void OnParametersSet()
    //    {
    //        if (Data != null)
    //        {
    //            _description = Data.Description;
    //            var user = await UserService.GetUserById(Data.OwnerId);
    //            _name = $"{user.FirstName} {user.LastName}";
    //            user = await http.GetJsonAsync<UserResponse>(AppConfig.BaseUrl + AppConfig.Port + "/api/v1.0/users/" + Data.OwnerId);
    //            var imageId = user.ProfileImage.PhotoId;
    //            imgSrc = await imageService.GetImageSrc(imageId);
    //            StateHasChanged();
    //
    //        }
    //    }
    protected override async Task OnParametersSetAsync()
    {
        if (Data != null)
        {
            _description = Data.Description;
            var user = await UserService.GetUserById(Data.OwnerId);
            _name = $"{user.FirstName} {user.LastName}";
            user = await http.GetJsonAsync<UserResponse>(AppConfig.BaseUrl + AppConfig.Port + "/api/v1.0/users/" + Data.OwnerId);
            var imageId = user.ProfileImage.PhotoId;
            imgSrc = await imageService.GetImageSrc(imageId);
            StateHasChanged();
        }
    }

}