@page "/admin/attractions"
@using System.IO
@using System.Text.Json
@using BlazorInputFile
@using LocationMaster_FE.ContainerState
@using LocationMaster_FE.Models
@using LocationMaster_FE.Models.Responses
@using LocationMaster_FE.Services
@using LocationMaster_FE.Services.IServices
@using Microsoft.AspNetCore.WebUtilities
@inject PlaceService Service
@inject IMatToaster Toaster
@inject IGeolocationService GeolocationService
@inject NavigationManager navManager
@inject IAttractionsService AttractionsService
@using LocationMaster_FE.Shared.Admin
<div class="admin-place-body">
    <CascadingValue Value="this">
        <NewAttraction Id=@_id/>
    </CascadingValue>
    <MatButton OnClick="DeleteAttractions" Raised="true">Delete selected attractions</MatButton>
    <MatTable Items="@_responses" class="mat-elevation-z5" FilterByColumnName="Name" DebounceMilliseconds="150">
        <MatTableHeader>
            <th>Edit</th>
            <th>Delete</th>
            <th>AttractionId</th>
            <th>Name</th>
            <th>Description</th>
            <th>Photo</th>
        </MatTableHeader>
        <MatTableRow>
            <td>
                <MatButton OnClick="@(() => OpenDialog(context))" Raised="true">Edit place</MatButton>
            </td>
            <td>
                <MatCheckbox @bind-Value="@context.Deleted"></MatCheckbox>
            </td>
            <td>@context.AttractionId</td>
            <td>@context.Name</td>
            <td>@context.GetDescription()</td>
            <td>
                <img src="@context.GetImage()" style="height:100px;">
            </td>
        </MatTableRow>

    </MatTable>
    <MatDialog @bind-IsOpen="@_dialogIsOpen" Class="custom_dialog">
        <MatDialogTitle>Edit atraction </MatDialogTitle>
        <MatDialogContent>
            <MatTextField @bind-Value="@_requestUpdate.Name" Label="Name" Required="true"></MatTextField>
            <MatTextField @bind-Value="@_requestUpdate.Description" Label="Description" TextArea="true" Required="true"></MatTextField>
            <InputFile OnChange="HandleSelection"/>
        </MatDialogContent>
        <MatDialogActions>
            <MatButton OnClick="@CancelButton">Cancel</MatButton>
            <MatButton OnClick="@SaveButton">Save</MatButton>
        </MatDialogActions>
    </MatDialog>
</div>

@code{
    private List<AttractionResponse> _responses;
    private string _id;

    private void CancelButton()
    {
        _requestUpdate = new UpdateAttractionRequest();
    }

    private void SaveButton()
    {
        AttractionsService.Put(_requestUpdate);
        _dialogIsOpen = false;
    }

    async Task HandleSelection(IFileListEntry[] files)
    {
        var file = files.FirstOrDefault();
        if (file != null)
        {
            if (file.Type != "image/png")
                Toaster.Add("Invalid photo format", MatToastType.Warning, "Photo attraction");
            else
            {
                var ms = new MemoryStream();
                await file.Data.CopyToAsync(ms);
                _requestUpdate.Photo = ms.ToArray();
                StateHasChanged();
            }
        }
    }

    void OpenDialog(AttractionResponse response)
    {
        _requestUpdate = UpdateAttractionRequest.Create(response);
        _dialogIsOpen = true;
    }

    public async void refresh()
    {
        await OnInitializedAsync();
    }

    public void UpdateList(SaveAttractionResource _saveAttraction)
    {
        _responses.Add(new AttractionResponse()
        {
            Description = _saveAttraction.Description,
            Name = _saveAttraction.Name,
            AttractionId = Guid.Parse(_id),
            Photo = _saveAttraction.Photo
        });
    }

    private void DeleteAttractions()
    {
        var deleted = 0;
        List<AttractionResponse> guids = new List<AttractionResponse>();
        foreach (var attractionResponse in _responses)
        {
            if (attractionResponse.Deleted)
            {
                guids.Add(attractionResponse);
                AttractionsService.delete(attractionResponse.AttractionId);
                deleted++;
            }
        }
        foreach (var attractionResponse in guids)
        {
            _responses.Remove(attractionResponse);
        }
        Toaster.Add($"{deleted} deleted atractions", MatToastType.Danger, "Attractions", "delete");
    }

    private async Task UpdateImages()
    {
        var result = await AttractionsService.GetImages(Guid.Parse(_id));
        _responses = result.data;
        StateHasChanged();
    }

    protected override async Task OnInitializedAsync()
    {
        _responses = new List<AttractionResponse>();
        var uri = navManager.ToAbsoluteUri(navManager.Uri);
        if (QueryHelpers.ParseQuery(uri.Query).TryGetValue("id", out var param))
        {
            _id = param.First();
            var result = await AttractionsService.Get(Guid.Parse(_id));
            if (result.Success)
            {
                _responses = result.data;
                if (_responses.Count == 0)
                    Toaster.Add("This place does't have attraction", MatToastType.Info, "Attractions", "");
                else
                {
                    StateHasChanged();
                    await UpdateImages();
                }
            }
        }
        else
            Toaster.Add("Invalid Id", MatToastType.Danger);
    }


    private bool _dialogIsOpen = false;
    private UpdateAttractionRequest _requestUpdate = new UpdateAttractionRequest();
}