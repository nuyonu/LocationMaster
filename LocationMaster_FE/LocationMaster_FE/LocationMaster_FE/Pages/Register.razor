@page "/register"
@using  System
@inject HttpClient http
@inject ILoginService  loginService
@inject NavigationManager navigationManager

@using LocationMaster_FE.Auth
@using LocationMaster_FE.Models

<TopPage PageTitle="Register"></TopPage>

<div class="d-flex justify-content-center">
    <EditForm class="w-50" Model="userInfo" OnValidSubmit="CreateUser">
        <DataAnnotationsValidator />
        <div class="form-group">
            <label>Username:</label>
            <div>
                <InputText class="form-control" @bind-Value="@userInfo.Username" @onfocus="RemoveErrors" />
                <ValidationMessage For="@(() => userInfo.Username)" />
            </div>
        </div>
        <div class="form-group">
            <label>Email:</label>
            <div>
                <InputText class="form-control" @bind-Value="@userInfo.Email" @onfocus="RemoveErrors"/>
                <ValidationMessage For="@(() => userInfo.Email)" />
            </div>
        </div>
        <div class="form-group">
            <label>Last name:</label>
            <div>
                <InputText class="form-control" @bind-Value="@userInfo.LastName" @onfocus="RemoveErrors"/>
                <ValidationMessage For="@(() => userInfo.LastName)" />
            </div>
        </div>
        <div class="form-group">
            <label>First name:</label>
            <div>
                <InputText class="form-control" @bind-Value="@userInfo.FirstName" @onfocus="RemoveErrors"/>
                <ValidationMessage For="@(() => userInfo.FirstName)" />
            </div>
        </div>
        <div class="form-group">
            <label>Date of birth:</label>
            <div>
                <InputDate class="form-control" @bind-Value="@userInfo.BirthDate" @onfocus="RemoveErrors"/>
                <ValidationMessage For="@(() => userInfo.BirthDate)" />
            </div>
        </div>
        <div class="form-group">
            <label>Password:</label>
            <div>
                <InputPassword class="form-control" @bind-Value="@userInfo.Password" @onfocus="RemoveErrors"/>
                <ValidationMessage For="@(() => userInfo.Password)" />
            </div>
        </div>

        <div class="text-center">
            <div class="text-danger">
                @ResponseErrors
            </div>
            <button type="submit" class="btn btn-primary">Register</button>
        </div>
    </EditForm>
</div>

@code {
    private UserInfoRegister userInfo = new UserInfoRegister();

    protected override void OnInitialized()
    {
        userInfo.BirthDate = DateTime.Now;
    }

    private string ResponseErrors { get; set; }

    async Task CreateUser()
    {
        try
        {
            var result = await http.PostJsonAsync<UserInfoRegister>("https://localhost:5003/api/v1.0/users", userInfo);
            Console.WriteLine(result);
            navigationManager.NavigateTo("");
        }
        catch (Exception ex)
        {
            ResponseErrors = "Username already used!";
        }
    }

    public void RemoveErrors()
    {
        ResponseErrors = null;
    }
}